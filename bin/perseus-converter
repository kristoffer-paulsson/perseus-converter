#!/usr/bin/env python3
#
# Copyright (c) 2022 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with
# or without fee is hereby granted, provided that the above copyright notice and this
# permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#     https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC
#
# Contributors:
#     Kristoffer Paulsson - initial implementation
#
import html
import logging
import unicodedata
from io import StringIO
from pathlib import PosixPath

from betacode.conv import beta_to_uni
from slugify import slugify

from perseusconverter.config import Config
from perseusconverter.converter import Classifier, Converter
from perseusconverter.logging import Logger

logger = Logger("perseus")
config = Config({})

def scanner(path: PosixPath):
    for directory in path.glob("**"):
        for file in directory.glob("*.xml"):
            yield file.resolve()


def koine_write(text: str) -> str:
    corpus = StringIO()
    text = html.unescape(text)
    for line in beta_to_uni(text).splitlines():
        for token in line.split(" "):
            vacuumed = token.strip()
            if vacuumed:
                corpus.write(vacuumed + " ")

    return unicodedata.normalize("NFD", corpus.getvalue())


def xml_opener(xml_file: PosixPath):
        item = Converter(xml_file)
        classifier = Classifier()
        if classifier.classify_tei(item.get_lxml(), Classifier.LANG_GREEK):
            # print(classifier.filename(item.get_lxml()))
            for note in item.get_lxml().select('note'):
                note.extract()
            print(koine_write(item.get_lxml().find("text").getText()))


if __name__ == '__main__':
    for xml_file in scanner(PosixPath("../data")):
        xml_opener(xml_file)
